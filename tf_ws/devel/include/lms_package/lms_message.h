// Generated by gencpp from file lms_package/lms_message.msg
// DO NOT EDIT!


#ifndef LMS_PACKAGE_MESSAGE_LMS_MESSAGE_H
#define LMS_PACKAGE_MESSAGE_LMS_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace lms_package
{
template <class ContainerAllocator>
struct lms_message_
{
  typedef lms_message_<ContainerAllocator> Type;

  lms_message_()
    : header()
    , angle_min(0.0)
    , angle_max(0.0)
    , angle_inc(0.0)
    , time_inc(0.0)
    , range_min(0.0)
    , range_max(0.0)
    , angles()
    , ranges()  {
    }
  lms_message_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , angle_min(0.0)
    , angle_max(0.0)
    , angle_inc(0.0)
    , time_inc(0.0)
    , range_min(0.0)
    , range_max(0.0)
    , angles(_alloc)
    , ranges(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _angle_min_type;
  _angle_min_type angle_min;

   typedef float _angle_max_type;
  _angle_max_type angle_max;

   typedef float _angle_inc_type;
  _angle_inc_type angle_inc;

   typedef float _time_inc_type;
  _time_inc_type time_inc;

   typedef float _range_min_type;
  _range_min_type range_min;

   typedef float _range_max_type;
  _range_max_type range_max;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angles_type;
  _angles_type angles;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ranges_type;
  _ranges_type ranges;




  typedef boost::shared_ptr< ::lms_package::lms_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lms_package::lms_message_<ContainerAllocator> const> ConstPtr;

}; // struct lms_message_

typedef ::lms_package::lms_message_<std::allocator<void> > lms_message;

typedef boost::shared_ptr< ::lms_package::lms_message > lms_messagePtr;
typedef boost::shared_ptr< ::lms_package::lms_message const> lms_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lms_package::lms_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lms_package::lms_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lms_package

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'lms_package': ['/home/calvon/tf_ws/src/lms_package/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lms_package::lms_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lms_package::lms_message_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lms_package::lms_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lms_package::lms_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lms_package::lms_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lms_package::lms_message_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lms_package::lms_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd7ebeab7b320dfe78d01b3e1ac4d506";
  }

  static const char* value(const ::lms_package::lms_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd7ebeab7b320dfeULL;
  static const uint64_t static_value2 = 0x78d01b3e1ac4d506ULL;
};

template<class ContainerAllocator>
struct DataType< ::lms_package::lms_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lms_package/lms_message";
  }

  static const char* value(const ::lms_package::lms_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lms_package::lms_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float32 angle_min\n\
float32 angle_max\n\
float32 angle_inc\n\
float32 time_inc\n\
float32 range_min\n\
float32 range_max\n\
float32[] angles\n\
float32[] ranges\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::lms_package::lms_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lms_package::lms_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.angle_min);
      stream.next(m.angle_max);
      stream.next(m.angle_inc);
      stream.next(m.time_inc);
      stream.next(m.range_min);
      stream.next(m.range_max);
      stream.next(m.angles);
      stream.next(m.ranges);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lms_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lms_package::lms_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lms_package::lms_message_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "angle_min: ";
    Printer<float>::stream(s, indent + "  ", v.angle_min);
    s << indent << "angle_max: ";
    Printer<float>::stream(s, indent + "  ", v.angle_max);
    s << indent << "angle_inc: ";
    Printer<float>::stream(s, indent + "  ", v.angle_inc);
    s << indent << "time_inc: ";
    Printer<float>::stream(s, indent + "  ", v.time_inc);
    s << indent << "range_min: ";
    Printer<float>::stream(s, indent + "  ", v.range_min);
    s << indent << "range_max: ";
    Printer<float>::stream(s, indent + "  ", v.range_max);
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angles[i]);
    }
    s << indent << "ranges[]" << std::endl;
    for (size_t i = 0; i < v.ranges.size(); ++i)
    {
      s << indent << "  ranges[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ranges[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LMS_PACKAGE_MESSAGE_LMS_MESSAGE_H
